{"version":3,"sources":["logger.js","api.js","constants.js","CodeMirror.js","Wysiwyg.js","App.js","serviceWorker.js","index.js"],"names":["logger","Pino","prettyPrint","level","wrapper","_len","arguments","length","data","Array","_key","apply","src_logger","info","bind","debug","trace","warn","error","fatal","config","baseURL","process","timeout","client","axios","create","api","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","options","resp","_args","wrap","_context","prev","next","undefined","objectSpread","sent","abrupt","t0","stop","this","CodeMirror","props","_props$value","value","_props$options","react_default","createElement","react_codemirror2","assign","Wysiwyg","editor","editorRef","React","createRef","prevProps","setData","window","CKEDITOR","Promise","resolve","reject","scriptjs","get","concat","replace","current","toolbarGroups","name","groups","removeButtons","_this2","callback","on","evt","onChange","getData","setCkeditorRef","destroy","className","ref","Component","defaultProps","htmltojsxConverter","HTMLtoJSX","createClass","initState","modelRemote","model","parentId","title","mode","isLoadingAll","activeDocId","jsx","App","state","docs","previewRef","ckeditorRef","handleClearChanges","_","MessageBox","confirm","confirmButtonText","cancelButtonText","_this","setState","clipboard","ClipboardJS","text","trigger","e","Notification","success","message","offset","App_Main","Main","css","_templateObject","App_Actions","cx","defineProperty","_templateObject2","src_Wysiwyg","src_CodeMirror","theme","lineNumbers","lineWrapping","readOnly","Actions","es5","onClick","disabled","type","_ref2","_callee3","_context3","innerHTML","_x2","cute","pretty","converted","convert","component","_ref3","_callee4","_context4","msgbox","showCancelButton","_x3","icon","App_StateHandler","_ref4","handleState","Fragment","_templateObject3","placeholder","nativeType","test","loading","isLoading","size","_ref5","_callee5","_context5","preventDefault","url","method","id","toConsumableArray","filter","doc","find","_x4","content","_templateObject4","onDoubleClick","StateHandler","children","withRouter","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kcAYMA,QAASC,GAAK,CAAEC,aAAa,IAEnCF,EAAOG,MAAQ,QASf,IAAMC,EAAU,SAAAD,GAAK,OAAI,WAAa,QAAAE,EAAAC,UAAAC,OAATC,EAAS,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAATF,EAASE,GAAAJ,UAAAI,GACpCV,EAAOG,GAAOQ,MAAMX,EAAQQ,KAGfI,EAAA,CACbC,KAAMb,EAAOa,KAAKC,KAAKd,GACvBe,MAAOf,EAAOe,MAAMD,KAAKd,GACzBgB,MAAOhB,EAAOgB,MAAMF,KAAKd,GACzBiB,KAAMjB,EAAOiB,KAAKH,KAAKd,GACvBkB,MAAOd,EAAQ,SACfe,MAAOf,EAAQ,UC7BXgB,EAAS,CACbC,QCLqBC,wBDMrBC,QAAS,KAGLC,EAASC,IAAMC,OAAON,GAkBbO,EAhBN,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA/B,UAAA,OAAAyB,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAON,EAAPE,EAAA9B,OAAA,QAAAmC,IAAAL,EAAA,GAAAA,EAAA,GAAiB,GAC3BrC,EAAOe,MAAM,iBAAbc,OAAAc,EAAA,EAAAd,CAAA,GAAoCT,EAAWe,IADrCI,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAIWjB,EAAOW,GAJlB,cAIFC,EAJEG,EAAAK,KAMR5C,EAAOe,MAAM,kBAAmBqB,GANxBG,EAAAM,OAAA,SAQDT,GARC,cAAAG,EAAAC,KAAA,GAAAD,EAAAO,GAAAP,EAAA,SAURvC,EAAOkB,MAAPqB,EAAAO,IAVQP,EAAAO,GAAA,yBAAAP,EAAAQ,SAAAb,EAAAc,KAAA,aAAH,yBAAApB,EAAAjB,MAAAqC,KAAA1C,YAAA,mEEYM2C,EAfI,SAAAC,GAAS,IAAAC,EAItBD,EAFFE,aAFwB,IAAAD,EAEhB,GAFgBA,EAAAE,EAItBH,EADFf,eAHwB,IAAAkB,EAGd,GAHcA,EAM1B,OACEC,EAAAtB,EAAAuB,cAACC,EAAA,aAAD3B,OAAA4B,OAAA,GACMP,EADN,CAEEE,MAAOA,EACPjB,QAASA,0CCbTuB,6MAOJC,OAAS,OAETC,UAAYC,IAAMC,8FAEEC,GACdf,KAAKW,QAAUI,EAAUvD,OAASwC,KAAKE,MAAM1C,MAC/CwC,KAAKW,OAAOK,QAAQhB,KAAKE,MAAM1C,iLAM1ByD,OAAOC,yCACJ,IAAIC,QAAQ,SAACC,EAASC,GAAV,OAAqBC,IAASC,IAAT,GAAAC,OFxBlBlD,oBEwBkB,yBAEnC8C,EACAC,gBAIFJ,OAAOC,iCACTlB,KAAKW,OAASM,OAAOC,SAASO,QAAQzB,KAAKY,UAAUc,QAAS,CAC5DC,cAAe,CACb,CAAEC,KAAM,WAAYC,OAAQ,CAAE,OAAQ,WAAY,aAClD,CAAED,KAAM,UAAWC,OAAQ,CAAE,OAAQ,YAAa,eAAgB,YAClE,CAAED,KAAM,QAASC,OAAQ,CAAE,UAC3B,CAAED,KAAM,cAAeC,OAAQ,CAAE,cAAe,YAChD,CAAED,KAAM,SAAUC,OAAQ,CAAE,WAC5B,CAAED,KAAM,QAASC,OAAQ,CAAE,UAC3B,IACA,CAAED,KAAM,YAAaC,OAAQ,CAAE,OAAQ,cACvC,CAAED,KAAM,YAAaC,OAAQ,CAAE,OAAQ,SAAU,SAAU,QAAS,OAAQ,cAC5E,CAAED,KAAM,SAAUC,OAAQ,CAAE,WAC5B,CAAED,KAAM,SAAUC,OAAQ,CAAE,WAC5B,CAAED,KAAM,QAASC,OAAQ,CAAE,UAC3B,CAAED,KAAM,SAAUC,OAAQ,CAAE,WAC5B,CAAED,KAAM,QAASC,OAAQ,CAAE,WAE7BC,cAAe,yCAIX,IAAIX,QAAQ,SAAAC,GAAO,OAAIW,EAAKpB,OAAOK,QAAQe,EAAK7B,MAAM1C,KAAM,CAAEwE,SAAUZ,aAE9EpB,KAAKW,OAAOsB,GAAG,SAAU,SAACC,GACxBH,EAAK7B,MAAMiC,SAASD,EAAIvB,OAAOyB,aAGjCpC,KAAKE,MAAMmC,eAAerC,KAAKW,kEAGjC3D,EAAOkB,MAAPqB,EAAAO,2QAKEE,KAAKW,uCACDX,KAAKW,OAAO2B,6IAKpB,OACEhC,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,WACdjC,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,YAAaC,IAAKxC,KAAKY,oBAvEzBC,IAAM4B,WAAtB/B,EACGgC,aAAe,CACpBP,SAAU,aACV3E,KAAM,GACN6E,eAAgB,cAyEL3B,02FC3Df,IAEMiC,EAAqB,IAAIC,IAAU,CACvCC,aAAa,IAGTC,EAAY,CAChBC,YAAa,GACbC,MAAO,GACPC,cAAUvD,EACVwD,WAAOxD,EACPyD,KAAM,OACNC,cAAc,EACdC,YAAa,GACbC,IAAK,IAGDC,6MACJC,qBACKV,GACHW,KAAM,OAuCRC,WAAa7C,IAAMC,cAEnB6C,YAAc,OAEdC,yDAAqB,SAAA1E,EAAM2E,GAAN,OAAA9E,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEXqE,aAAWC,QACf,2CACE,sCACA,CACAC,kBAAmB,gBACnBC,iBAAkB,WAPL,OAWjBC,EAAKP,YAAY3C,UAEjBkD,EAAKC,SAALtF,OAAAc,EAAA,EAAAd,CAAA,GACKiE,IAdYvD,EAAAE,KAAA,eAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,iCAAAA,EAAAQ,SAAAb,EAAAc,KAAA,oEAuBrBqC,eAAiB,SAAAG,GAAS0B,EAAKP,YAAcnB,4MA9CrC4B,EAAY,IAAIC,IAAY,mBAAoB,CACpDC,KAAM,SAAAC,GAAO,OAAIxC,EAAKyB,MAAMF,QAGpBrB,GAAG,UAAW,SAAAuC,GAGtBC,eAAaC,QAAQ,CACnBxB,MAAO,SACPyB,QAAS,oDACTC,OAAQ,QAIZR,EAAUnC,GAAG,QAAS,SAAAuC,GACpBxH,EAAOkB,MAAMsG,wIAuDf,OACElE,EAAAtB,EAAAuB,cAACsE,EAADhG,OAAA4B,OAAA,GACMT,KAAKwD,MACLxD,KAAKE,MACLF,KAHN,CAIEmE,SAAUnE,KAAKmE,SAASrG,KAAKkC,gBAlGnBa,IAAM4B,WAwGlBqC,EAAO,SAAA5E,GAAS,IAElB6C,EAME7C,EANF6C,YACAI,EAKEjD,EALFiD,KACAG,EAIEpD,EAJFoD,IACAa,EAGEjE,EAHFiE,SACAT,EAEExD,EAFFwD,WACArB,EACEnC,EADFmC,eAGF,OACE/B,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAWwC,YAAFC,IApIE,0DA+Pd1E,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,YAGdjC,EAAAtB,EAAAuB,cAAC0E,EAAY/E,GAGbI,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,cAGdjC,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW2C,YAAG,OAADrG,OAAAsG,EAAA,EAAAtG,CAAA,GACfkG,YADeK,KACgB,SAATjC,KAEvB7C,EAAAtB,EAAAuB,cAAC8E,EAAD,CACEhD,eAAgBA,EAChB7E,KAAMuF,EACNZ,SAAU,SAAA3E,GAAI,OAAI2G,EAAS,CAAEnB,MAAOxF,QAK9B,YAAT2F,GACC7C,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,WACdjC,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,OAAQC,IAAKkB,KAKvB,WAATP,GACC7C,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,UACdjC,EAAAtB,EAAAuB,cAAA,UACEgC,UAAW,gDADb,qBAMAjC,EAAAtB,EAAAuB,cAAC+E,EAAD,CACElF,MAAOkD,EACPnE,QAAS,CACPgE,KAAM,aACNoC,MAAO,WACPC,aAAa,EACbC,cAAc,EACdC,UAAU,UAsItBC,EAAU,SAAAzF,GAAS,IAErBiD,EASEjD,EATFiD,KACAgB,EAQEjE,EARFiE,SACAT,EAOExD,EAPFwD,WACAV,EAME9C,EANF8C,MACAE,EAKEhD,EALFgD,MACAD,EAIE/C,EAJF+C,SAEAQ,EAEEvD,EAFFuD,KACAG,EACE1D,EADF0D,mBAGF,OACEtD,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,OACdjC,EAAAtB,EAAAuB,cAAA,OAAKgC,UAAW,QAEdjC,EAAAtB,EAAAuB,cAACqF,EAAA,OAAD,CACEC,QAAS,SAAAhC,GAAC,OAAIM,EAAS,CAAEhB,KAAM,UAC/B2C,SAAmB,SAAT3C,EACV4C,KAAM,WAHR,QAQAzF,EAAAtB,EAAAuB,cAACqF,EAAA,OAAD,CACEC,QAAO,eAAAG,EAAAnH,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAE,SAAAgH,EAAMpC,GAAN,OAAA9E,EAAAC,EAAAM,KAAA,SAAA4G,GAAA,cAAAA,EAAA1G,KAAA0G,EAAAzG,MAAA,cAAAyG,EAAAzG,KAAA,EACD0E,EAAS,CAAEhB,KAAM,YADhB,OAGPO,EAAWhC,QAAQyE,UAAYnD,EAHxB,wBAAAkD,EAAAnG,SAAAkG,EAAAjG,SAAF,gBAAAoG,GAAA,OAAAJ,EAAArI,MAAAqC,KAAA1C,YAAA,GAKPwI,SAAmB,YAAT3C,GANZ,WAWA7C,EAAAtB,EAAAuB,cAACqF,EAAA,OAAD,CACEC,QAAS,SAAAhC,GACP,IAAMwC,EAAOC,IAAOtD,GAEduD,EAAY5D,EAAmB6D,QAAQH,GAEvCI,EAAS,8FAAAjF,OAMrB+E,EANqB,kDAYfpC,EAAS,CACPb,IAAKmD,EACLtD,KAAM,YAIV2C,SAAmB,WAAT3C,IAAsBH,EAChC+C,KAAM,WAzBR,mBA8BAzF,EAAAtB,EAAAuB,cAACqF,EAAA,OAAD,CACEC,QAAO,eAAAa,EAAA7H,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAE,SAAA0H,EAAM9C,GAAN,OAAA9E,EAAAC,EAAAM,KAAA,SAAAsH,GAAA,cAAAA,EAAApH,KAAAoH,EAAAnH,MAAA,OACPqE,aAAW+C,OAAO,CAChB3D,MAAO,OACPyB,QAAS,8KACTmC,kBAAkB,EAClB9C,kBAAmB,OALd,wBAAA4C,EAAA7G,SAAA4G,EAAA3G,SAAF,gBAAA+G,GAAA,OAAAL,EAAA/I,MAAAqC,KAAA1C,YAAA,GAQP0J,KAAM,eATR,SAsFF1G,EAAAtB,EAAAuB,cAAC0G,EAAD,KACG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAa3D,EAAhB0D,EAAgB1D,MAAhB,OACClD,EAAAtB,EAAAuB,cAAAD,EAAAtB,EAAAoI,SAAA,KACkB,SAAf5D,EAAML,MACP7C,EAAAtB,EAAAuB,cAAA,QAAMgC,UAAWwC,YAAFsC,MAIb/G,EAAAtB,EAAAuB,cAACqF,EAAA,MAAD,CACE0B,YAAa,gBACblH,MAAOoD,EAAMN,MACbf,SAAU,SAAA/B,GAAK,OAAI+G,EAAY,CAAEjE,MAAO9C,OAE1CE,EAAAtB,EAAAuB,cAACqF,EAAA,OAAD,CACE2B,WAAY,SACZzB,UAAW,KAAK0B,KAAKhE,EAAMN,QAAUM,EAAMN,QAAUA,EACrD8D,KAAM,eACNjB,KAAM,UACN0B,QAASjE,EAAMkE,UACfC,KAAM,QACN9B,QAAO,eAAA+B,EAAA/I,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAE,SAAA4I,EAAMrD,GAAN,OAAAzF,EAAAC,EAAAM,KAAA,SAAAwI,GAAA,cAAAA,EAAAtI,KAAAsI,EAAArI,MAAA,cACP+E,EAAEuD,iBAEFZ,EAAY,CAAEO,WAAW,IAHlBI,EAAAtI,KAAA,EAAAsI,EAAArI,KAAA,EAMCd,EAAI,CACRqJ,IAAG,SAAAxG,OAAWyB,GACdgF,OAAQ,MACRzK,KAAM,CACJ0K,GAAIjF,EACJC,MAAOM,EAAMN,SAXZ,OAeLiB,EAAS,CACPjB,MAAOM,EAAMN,MACbO,KAAI,GAAAjC,OAAA3C,OAAAsJ,EAAA,EAAAtJ,CACC4E,EAAK2E,OAAO,SAAAC,GAAG,OAAIA,EAAIH,KAAOjF,KAD/B,CAAApE,OAAAc,EAAA,EAAAd,CAAA,GAGG4E,EAAK6E,KAAK,SAAAD,GAAG,OAAIA,EAAIH,KAAOjF,IAH/B,CAIAC,MAAOM,EAAMN,YArBd4E,EAAArI,KAAA,gBAAAqI,EAAAtI,KAAA,EAAAsI,EAAAhI,GAAAgI,EAAA,SA0BL9K,EAAOkB,MAAP4J,EAAAhI,IA1BK,QA6BPqH,EAAY,CACVhE,UAAMzD,EACNgI,WAAW,IA/BN,yBAAAI,EAAA/H,SAAA8H,EAAA7H,KAAA,YAAF,gBAAAuI,GAAA,OAAAX,EAAAjK,MAAAqC,KAAA1C,YAAA,IAPT,QA0CAgD,EAAAtB,EAAAuB,cAACqF,EAAA,OAAD,CACE+B,KAAM,QACN9B,QAAS,SAAAhC,GAAC,OAAIsD,EAAY,CAAEhE,UAAMzD,KAClCsH,KAAM,gBAHR,YAQAxD,EAAML,MACR7C,EAAAtB,EAAAuB,cAACqF,EAAA,QAAD,CAAS4C,QAAS,wBAChBlI,EAAAtB,EAAAuB,cAAA,OACEgC,UAAW2C,YAAG,WAAYH,YAAb0D,MACbC,cAAe,SAAA7E,GAAC,OAAIsD,EAAY,CAAEhE,KAAM,OAAQD,MAAOA,MAEtDA,GAAK,UAAA1B,OAAc0B,QAQ9B5C,EAAAtB,EAAAuB,cAACqF,EAAA,OAAD,CACEG,KAAM,UACNF,QAASjC,EACTkC,UAAW9C,GAHb,eA0CA2F,6MACJnF,MAAQ,2EAGN,OAAOxD,KAAKE,MAAM0I,SAAS,CACzBzB,YAAanH,KAAKmE,SAASrG,KAAKkC,MAChCwD,MAAOxD,KAAKwD,eANS3C,IAAM4B,WAWlBoG,OAAWtF,GCptBNuF,QACW,cAA7B7H,OAAO8H,SAASC,UAEe,UAA7B/H,OAAO8H,SAASC,UAEhB/H,OAAO8H,SAASC,SAASC,MACvB,yECXNC,IAASC,OACP7I,EAAAtB,EAAAuB,cAAC6I,GAAA,EAAD,KACE9I,EAAAtB,EAAAuB,cAAC8I,GAAD,OAEAC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.873fcedd.chunk.js","sourcesContent":["import Pino from 'pino'\n\n// LEVELS\n\n// 'silent'\n// 'fatal'\n// 'error'\n// 'warn'\n// 'info'\n// 'debug'\n// 'trace'\n\nconst logger = Pino({ prettyPrint: true })\n\nlogger.level = 'trace'\n\n// USAGE EXAMPLE:\n\n// logger.debug('comment', obj, array, ...)\n// logger.error(...)\n// logger.fatal(...)\n// logger.info(...)\n\nconst wrapper = level => (...data) => {\n  logger[level].apply(logger, data)\n}\n\nexport default {\n  info: logger.info.bind(logger),\n  debug: logger.debug.bind(logger),\n  trace: logger.trace.bind(logger),\n  warn: logger.warn.bind(logger),\n  error: wrapper('error'),\n  fatal: wrapper('fatal')\n}\n","import axios from 'axios'\nimport logger from './logger'\nimport { API_URL } from './constants'\n\nconst config = {\n  baseURL: API_URL,\n  timeout: 4000\n}\n\nconst client = axios.create(config)\n\nconst api = async (options = {}) => {\n  logger.debug('API REQUEST =>', { ...config, ...options })\n\n  try {\n    const resp = await client(options)\n\n    logger.debug('API RESPONSE =>', resp)\n\n    return resp\n  } catch (error) {\n    logger.error(error)\n\n    throw error\n  }\n}\n\nexport default api\n","export const API_URL = process.env.REACT_APP_API_URL\nexport const CKEDITOR_PATH = process.env.REACT_APP_CKEDITOR_PATH\n","import React from 'react'\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/theme/neat.css'\nimport 'codemirror/mode/xml/xml.js'\nimport 'codemirror/mode/javascript/javascript.js'\nimport { UnControlled } from 'react-codemirror2'\n\nconst CodeMirror = props => {\n  const {\n    value = '',\n    options = {}\n  } = props\n\n  return (\n    <UnControlled\n      {...props}\n      value={value}\n      options={options}\n    />\n  )\n}\n\nexport default CodeMirror\n","import React from 'react'\nimport logger from './logger'\nimport scriptjs from 'scriptjs'\nimport { CKEDITOR_PATH } from './constants'\n\nclass Wysiwyg extends React.Component {\n  static defaultProps = {\n    onChange: () => {},\n    data: '',\n    setCkeditorRef: () => {}\n  }\n\n  editor = null\n\n  editorRef = React.createRef()\n\n  componentDidUpdate (prevProps) {\n    if (this.editor && prevProps.data !== this.props.data) {\n      this.editor.setData(this.props.data)\n    }\n  }\n\n  async componentDidMount () {\n    try {\n      if (!window.CKEDITOR) {\n        await new Promise((resolve, reject) => scriptjs.get(\n          `${CKEDITOR_PATH}/ckeditor/ckeditor.js`\n          , resolve\n          , reject\n        ))\n      }\n\n      if (window.CKEDITOR) {\n        this.editor = window.CKEDITOR.replace(this.editorRef.current, {\n          toolbarGroups: [\n            { name: 'document', groups: [ 'mode', 'document', 'doctools' ] },\n            { name: 'editing', groups: [ 'find', 'selection', 'spellchecker', 'editing' ] },\n            { name: 'forms', groups: [ 'forms' ] },\n            { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n            { name: 'insert', groups: [ 'insert' ] },\n            { name: 'links', groups: [ 'links' ] },\n            '/',\n            { name: 'clipboard', groups: [ 'undo', 'clipboard' ] },\n            { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi', 'paragraph' ] },\n            { name: 'styles', groups: [ 'styles' ] },\n            { name: 'colors', groups: [ 'colors' ] },\n            { name: 'tools', groups: [ 'tools' ] },\n            { name: 'others', groups: [ 'others' ] },\n            { name: 'about', groups: [ 'about' ] }\n          ],\n          removeButtons: 'Cut,Copy,Paste,Internallink'\n        })\n\n        // pre fill if needed\n        await new Promise(resolve => this.editor.setData(this.props.data, { callback: resolve }))\n\n        this.editor.on('change', (evt) => {\n          this.props.onChange(evt.editor.getData())\n        })\n\n        this.props.setCkeditorRef(this.editor)\n      }\n    } catch (error) {\n      logger.error(error)\n    }\n  }\n\n  async componentWillUnmount () {\n    if (this.editor) {\n      await this.editor.destroy()\n    }\n  }\n\n  render () {\n    return (\n      <div className={'wysiwyg'}>\n        <div className={'ckeditor4'} ref={this.editorRef} />\n      </div>\n    )\n  }\n}\n\nexport default Wysiwyg\n","import React from 'react'\nimport 'element-theme-default'\nimport {\n  Button,\n  // Dropdown,\n  MessageBox,\n  // Loading,\n  Input,\n  Tooltip,\n  Notification\n} from 'element-react'\nimport withRouter from 'react-router-dom/withRouter'\nimport { css, cx } from 'emotion'\n// import isEqual from 'lodash.isequal'\nimport api from './api'\nimport logger from './logger'\n// import moment from 'moment'\nimport HTMLtoJSX from 'htmltojsx'\nimport CodeMirror from './CodeMirror'\nimport ClipboardJS from 'clipboard'\nimport Wysiwyg from './Wysiwyg'\nimport pretty from 'pretty'\n\nconst PAGE_OFFSET = '50px'\n\nconst htmltojsxConverter = new HTMLtoJSX({\n  createClass: false\n})\n\nconst initState = {\n  modelRemote: '',\n  model: '',\n  parentId: undefined,\n  title: undefined,\n  mode: 'edit',\n  isLoadingAll: false,\n  activeDocId: '',\n  jsx: ''\n}\n\nclass App extends React.Component {\n  state = {\n    ...initState,\n    docs: []\n  }\n\n  async componentDidMount () {\n    //   this.setState({ isLoadingAll: true })\n\n    //   try {\n    //     const { data: docs } = await api({\n    //       url: '/docs',\n    //       method: 'GET'\n    //     })\n\n    //     this.setState({ docs: docs })\n    //   } catch (error) {\n    //     logger.error(error)\n    //   }\n\n    //   this.setState({ isLoadingAll: false })\n\n    // clipboard\n    const clipboard = new ClipboardJS('.clipboardButton', {\n      text: trigger => this.state.jsx\n    })\n\n    clipboard.on('success', e => {\n      // logger.debug(e)\n\n      Notification.success({\n        title: 'Copied',\n        message: 'React component copied to clipboard successfully!',\n        offset: 100\n      })\n    })\n\n    clipboard.on('error', e => {\n      logger.error(e)\n    })\n  }\n\n  previewRef = React.createRef()\n\n  ckeditorRef = null\n\n  handleClearChanges = async _ => {\n    try {\n      await MessageBox.confirm(\n        'Your changes will be lost, are you sure?'\n        , 'Clear editor and start from scratch'\n        , {\n          confirmButtonText: 'CLEAR CHANGES',\n          cancelButtonText: 'CANCEL'\n        }\n      )\n\n      this.ckeditorRef.setData()\n\n      this.setState({\n        ...initState\n      })\n    } catch (error) {\n      // do nothing\n    }\n\n    // this.props.push('/')\n  }\n\n  setCkeditorRef = ref => { this.ckeditorRef = ref }\n\n  render () {\n    // const {\n    //   // location: { pathname },\n    //   history: { push }\n    // } = this.props\n\n    // const {\n    //   parentId,\n    //   title,\n    //   docs,\n    //   model,\n    //   modelRemote,\n    //   mode,\n    //   isLoadingAll,\n    //   activeDocId,\n    //   jsx\n    // } = this.state\n\n    // const setState = this.setState.bind(this)\n\n    // const previewRef = this.previewRef\n\n    return (\n      <Main\n        {...this.state}\n        {...this.props}\n        {...this}\n        setState={this.setState.bind(this)}\n      />\n    )\n  }\n}\n\nconst Main = props => {\n  const {\n    modelRemote,\n    mode,\n    jsx,\n    setState,\n    previewRef,\n    setCkeditorRef\n  } = props\n\n  return (\n    <div className={css`\n      padding-top: ${PAGE_OFFSET};\n\n      .nav {\n        z-index: 999;\n        display: flex;\n        justify-content: space-between;\n        height: ${PAGE_OFFSET};\n        position: fixed;\n        top: 0;\n        left: 0;\n        right: 0;\n        background: #ffffff;\n        align-items: center;\n        padding: 0 .5rem;\n\n        > div {\n          display: flex;\n        }\n\n        .docsButton {\n          margin-right: 10px;\n\n          ul {\n            white-space: nowrap;\n          }\n        }\n\n        .feedback {\n          font-weight: lighter;\n        }\n\n        button {\n          font-weight: bold;\n        }\n      }\n\n      .docsList {\n        width: 200px;\n        /* top: ${PAGE_OFFSET}; */\n        left: 0;\n        position: fixed;\n        height: calc(100vh - ${PAGE_OFFSET});\n        box-sizing: border-box;\n        background-color: #F9FAFC;\n        overflow: auto;\n        z-index: 1;\n\n        .docItem {\n          padding: .5rem;\n          font-weight: lighter;\n          font-size: 13.5px;\n          border-bottom: 1px solid #D3DCE6;\n          cursor: pointer;\n\n          &.active {\n            background-color: #1D8CE0;\n            color: #ffffff;\n          }\n        }\n      }\n      \n      .mainArea {\n        \n        .editorArea {\n          flex-grow: 1;\n          /* margin-left: 200px; */\n\n          .cke_inner.cke_reset {\n            div[id$=\"_contents\"] {\n              height: calc(100vh - ${PAGE_OFFSET} - 77px) !important;\n            }\n          }\n          \n          .wysiwyg {\n            height: calc(100vh - ${PAGE_OFFSET});\n            background: #EFEFEF;\n\n            > div {\n              max-width: 800px;\n              margin: auto;\n            }\n          }\n          \n          .preview {\n            height: calc(100vh - ${PAGE_OFFSET});\n            box-sizing: border-box;\n            background: #EFEFEF;\n            padding: 2rem 2rem;\n            \n            .html {\n              background: #ffffff;\n              min-height: 100%;\n              padding: 1cm 2cm;\n              box-sizing: border-box;\n              max-width: 800px;\n              margin: auto;\n            }\n          }\n\n          .export {\n            position: relative;\n\n            .CodeMirror {\n              height: calc(100vh - ${PAGE_OFFSET});\n            }\n\n            .clipboardButton {\n              position: absolute;\n              top: 5px;\n              right: 5px;\n              z-index: 3;\n            }\n          }\n        }\n      }\n    `}>\n\n      {/* LIST OF VERSIONS */}\n      {/* <div className={'docsList'}>\n        <ListOfVersions {...props} />\n      </div> */}\n\n      <div className={'mainArea'}>\n\n        {/* ACTIONS */}\n        <Actions {...props} />\n\n        {/* EDITOR AREA */}\n        <div className={'editorArea'}>\n\n          {/* EDITOR */}\n          <div className={cx('edit', {\n            [css`display: none;`]: mode !== 'edit'\n          })}>\n            <Wysiwyg\n              setCkeditorRef={setCkeditorRef}\n              data={modelRemote}\n              onChange={data => setState({ model: data })}\n            />\n          </div>\n\n          {/* PREVIEW */}\n          {mode === 'preview' &&\n            <div className={'preview'}>\n              <div className={'html'} ref={previewRef} />\n            </div>\n          }\n\n          {/* EXPORT TO JSX */}\n          {mode === 'export' &&\n            <div className={'export'}>\n              <button\n                className={'el-button clipboardButton el-button--success'}\n              >\n              COPY TO CLIPBOARD\n              </button>\n\n              <CodeMirror\n                value={jsx}\n                options={{\n                  mode: 'javascript',\n                  theme: 'material',\n                  lineNumbers: true,\n                  lineWrapping: true,\n                  readOnly: true\n                }}\n              />\n            </div>\n          }\n\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\n// const ListOfVersions = props => {\n//   const {\n//     docs,\n//     setState,\n//     activeDocId,\n//     isLoadingAll,\n//     parentId\n//   } = props\n\n//   return (\n//     <>\n//       <Dropdown\n//         className={'docsButton'}\n//         trigger={'click'}\n//         onCommand={async id => {\n//           setState({ isLoadingAll: true })\n\n//           const doc = docs.find(doc => doc.id === id)\n\n//           // find most recent doc\n//           const mostRecentDoc = docs.filter(doc => doc.parentId === id || doc.id === id)\n//             .sort((a, b) => +b.createdAt - a.createdAt)\n//             .shift()\n\n//           try {\n//             // get it\n//             await getDocById({\n//               activeDocId,\n//               doc: mostRecentDoc,\n//               setState\n//             })\n//           } catch (error) {\n//             logger.error(error)\n//           }\n\n//           setState({\n//             parentId: doc.id,\n//             title: doc.title,\n//             mode: 'edit',\n//             isLoadingAll: false\n//           })\n//         }}\n//         menu={\n//           <Dropdown.Menu>\n//             {docs.filter(doc => !!doc.title)\n//               .sort((a, b) => {\n//                 if (a.title < b.title) { return -1 }\n//                 if (a.title > b.title) { return 1 }\n//                 return 0\n//               })\n//               .map((doc = {}, idx) => (\n//                 <Dropdown.Item\n//                   className={'menuOption'}\n//                   key={idx}\n//                   command={doc.id}\n//                 >{doc.title}</Dropdown.Item>\n//               ))}\n//           </Dropdown.Menu>\n//         }\n//       >\n//         <Button\n//           loading={isLoadingAll}\n//           disabled={!docs.filter(doc => !!doc.title).length}\n//         >\n//           <span>\n//                 DOCS ({docs.filter(doc => !!doc.title).length})\n//             <i className='el-icon-caret-bottom el-icon--right' />\n//           </span>\n//         </Button>\n//       </Dropdown>\n\n//       {/* LIST */}\n//       <StateHandler>\n//         {({ handleState, state }) =>\n//           <React.Fragment>\n//             {state.isLoading && <Loading fullscreen />}\n\n//             {!parentId &&\n//             <div className={'docItem'}>Select a doc from \"DOCS\"</div>\n//             }\n\n//             {parentId &&\n//             <React.Fragment>\n\n//               {/* GET A DOC */}\n//               {docs.filter(doc => doc.parentId === parentId || doc.id === parentId)\n//                 .sort((a, b) => +b.createdAt - a.createdAt)\n//                 .map((doc, idx) => (\n//                   <div\n//                     className={cx({\n//                       docItem: true,\n//                       active: activeDocId === doc.id\n//                     })}\n//                     key={idx}\n//                     onClick={async _ => {\n//                       await getDocById({\n//                         activeDocId,\n//                         doc,\n//                         setState,\n//                         handleState\n//                       })\n\n//                       setState({ mode: 'edit' })\n//                     }}\n//                   >\n//                     <div className={'row'}>Revision created on</div>\n//                     <div className={'row'}>{moment(doc.createdAt).format('MM/DD/YYYY hh:mm:ss:SSS a')}</div>\n//                   </div>\n//                 ))\n//               }\n\n//             </React.Fragment>\n//             }\n//           </React.Fragment>\n//         }\n//       </StateHandler>\n//     </>\n//   )\n// }\n\nconst Actions = props => {\n  const {\n    mode,\n    setState,\n    previewRef,\n    model,\n    title,\n    parentId,\n    // modelRemote,\n    docs,\n    handleClearChanges\n  } = props\n\n  return (\n    <div className={'nav'}>\n      <div className={'left'}>\n\n        <Button\n          onClick={_ => setState({ mode: 'edit' })}\n          disabled={mode === 'edit'}\n          type={'primary'}\n        >\n              EDIT\n        </Button>\n\n        <Button\n          onClick={async _ => {\n            await setState({ mode: 'preview' })\n\n            previewRef.current.innerHTML = model\n          }}\n          disabled={mode === 'preview'}\n        >\n          PREVIEW\n        </Button>\n\n        <Button\n          onClick={_ => {\n            const cute = pretty(model)\n\n            const converted = htmltojsxConverter.convert(cute)\n\n            const component = `\nimport React from 'react'\n\nconst ExportedComponent = props => {\n  return (\n    \n    ${converted}\n  )\n}\n\nexport default ExportedComponent\n`\n            setState({\n              jsx: component,\n              mode: 'export'\n            })\n          }\n          }\n          disabled={mode === 'export' || !model}\n          type={'success'}\n        >\n              EXPORT to REACT\n        </Button>\n\n        <Button\n          onClick={async _ => {\n            MessageBox.msgbox({\n              title: 'Help',\n              message: 'This is a web app to create React components from html that is generated via the text editor. Enter some text and then hit the \"EXPORT to REACT\" button to see the results.',\n              showCancelButton: false,\n              confirmButtonText: 'OK'\n            })\n          }}\n          icon={'information'}\n        >\n          HELP\n        </Button>\n\n        {/* CREATE DOC */}\n        {/* <StateHandler>\n          {({ handleState, state }) =>\n            <Button\n              onClick={async _ => {\n                handleState({ isLoading: true })\n\n                let newTitle\n\n                if (!title) {\n                  try {\n                    const { value } = await MessageBox.prompt(\n                      'Please enter a Title for this document',\n                      'Set Title',\n                      {\n                        confirmButtonText: 'OK',\n                        cancelButtonText: 'Cancel',\n                        inputPattern: /\\w/,\n                        inputErrorMessage: 'Invalid Title'\n                      }\n                    )\n\n                    newTitle = `${value}`.trim()\n\n                    setState({ title: newTitle })\n                  } catch (error) {\n                    handleState({ isLoading: false })\n\n                    return\n                  }\n                }\n\n                try {\n                  const { data: doc } = await api({\n                    url: '/docs',\n                    method: 'POST',\n                    data: {\n                      parentId: parentId,\n                      title: newTitle,\n                      contents: model\n                    }\n                  })\n\n                  setState(({ docs }) => ({\n                    modelRemote: model,\n                    docs: [ ...docs, doc ],\n                    activeDocId: doc.id\n                  }))\n\n                  if (!parentId) {\n                    setState({ parentId: doc.id })\n                  }\n                } catch (error) {\n                  logger.error(error)\n\n                  setState({ title: undefined })\n                }\n\n                handleState({ isLoading: false })\n              }}\n\n              loading={state.isLoading}\n              type={'primary'}\n              disabled={isEqual(model, modelRemote) || model === ''}\n            >\n              SAVE\n            </Button>\n          }\n        </StateHandler> */}\n\n      </div>\n\n      <StateHandler>\n        {({ handleState, state }) =>\n          <>\n            {state.mode === 'edit' &&\n            <form className={css`\n              display: flex; \n              align-items: center;\n            `}>\n              <Input\n                placeholder={'enter a title'}\n                value={state.title}\n                onChange={value => handleState({ title: value })}\n              />\n              <Button\n                nativeType={'submit'}\n                disabled={!/\\w/.test(state.title) || state.title === title}\n                icon={'circle-check'}\n                type={'primary'}\n                loading={state.isLoading}\n                size={'small'}\n                onClick={async e => {\n                  e.preventDefault()\n\n                  handleState({ isLoading: true })\n\n                  try {\n                    await api({\n                      url: `/docs/${parentId}`,\n                      method: 'PUT',\n                      data: {\n                        id: parentId,\n                        title: state.title\n                      }\n                    })\n\n                    setState({\n                      title: state.title,\n                      docs: [\n                        ...docs.filter(doc => doc.id !== parentId),\n                        {\n                          ...docs.find(doc => doc.id === parentId),\n                          title: state.title\n                        }\n                      ]\n                    })\n                  } catch (error) {\n                    logger.error(error)\n                  }\n\n                  handleState({\n                    mode: undefined,\n                    isLoading: false\n                  })\n                }}\n              >SAVE</Button>\n              <Button\n                size={'small'}\n                onClick={_ => handleState({ mode: undefined })}\n                icon={'circle-close'}\n              >CANCEL</Button>\n            </form>\n            }\n\n            {!state.mode &&\n            <Tooltip content={'double click to edit'}>\n              <div\n                className={cx('feedback', css`cursor: pointer;`)}\n                onDoubleClick={_ => handleState({ mode: 'edit', title: title })}\n              >\n                {title && `Title: ${title}`}\n              </div>\n            </Tooltip>\n            }\n          </>\n        }\n      </StateHandler>\n\n      <Button\n        type={'warning'}\n        onClick={handleClearChanges}\n        disabled={!model}\n      >\n            START NEW\n      </Button>\n\n    </div>\n  )\n}\n\n// const getDocById = async ({\n//   activeDocId = '',\n//   doc = {},\n//   setState = () => {},\n//   handleState = () => {}\n// }) => {\n//   if (activeDocId && activeDocId === doc.id) {\n//     return\n//   }\n\n//   handleState({ isLoading: true })\n\n//   try {\n//     const { data } = await api({\n//       url: `/docs/${doc.id}`,\n//       method: 'GET'\n//     })\n\n//     setState({\n//       model: data.contents,\n//       modelRemote: data.contents,\n//       activeDocId: doc.id\n//     })\n//   } catch (error) {\n//     logger.error(error)\n//   }\n\n//   handleState({ isLoading: false })\n// }\n\nclass StateHandler extends React.Component {\n  state = {}\n\n  render () {\n    return this.props.children({\n      handleState: this.setState.bind(this),\n      state: this.state\n    })\n  }\n}\n\nexport default withRouter(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}